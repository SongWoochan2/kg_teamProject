<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="movieMapper">

	<insert id="movieInsert" parameterType="movieDTO">
		INSERT INTO movie
		VALUES(movie_seq.nextval,#{movie_name},#{movie_content},#{make_nation},#{movie_open_date},#{movie_recycle_time},#{movie_show_grade_name},#{movie_type1},#{movie_type2},#{movie_type3},
		#{movie_director},0,0,#{appear_actor},0,0)
	</insert>
	
	<update id="movieModify" parameterType="movieDTO">
		update movie set movie_name=#{movie_name}, movie_content=#{movie_content}, make_nation=#{make_nation},movie_director=#{movie_director},movie_open_date=#{movie_open_date},
		movie_recycle_time=#{movie_recycle_time},movie_show_grade_name=#{movie_show_grade_name},movie_type1=#{movie_type1},movie_type2=#{movie_type2},movie_type3=#{movie_type3},appear_actor=#{appear_actor}
		 where movie_code = #{movie_code}
	</update>
		
	<update id="goodUpdate" parameterType="java.util.Map">
		update movie set good_num = good_num+#{good} where movie_code=#{movie_code} 
	</update>
	
	<update id="updateEvaluatScore" parameterType="java.util.Map">
		update movie set acc_evaluat_score=#{acc_evaluat_score} where movie_code=#{movie_code}
	</update>
	
	<update id="updateEvaluatNum" parameterType="java.util.Map">
		update movie set movie_evaluat_num=#{movie_evaluat_num} where movie_code=#{movie_code}
	</update>
	
	<delete id="movieDelete" parameterType="movieDTO">
		delete from movie where movie_code = #{movie_code}
	</delete>
	
	<select id="getTotalA" resultType="int">
		select count(*) from movie
	</select>
	
	<select id = "movieList" parameterType="java.util.Map" resultType="movieDTO">
		<![CDATA[select movie_code, movie_name, movie_director, movie_show_grade_name, movie_recycle_time,
				to_char(movie_open_date, 'YYYY.MM.DD') as movie_open_date from 
				(select rownum rn, tt.* from 
				(select * from movie order by movie_code desc) tt) 
				 where rn>=#{startNum} and rn<=#{endNum}]]>
	</select>
	
	<select id = "movieView" parameterType="int" resultType="movieDTO">
		select movie_code, movie_name, movie_director, movie_show_grade_name, movie_recycle_time, movie_type1, movie_type2, movie_type3, movie_content, make_nation, appear_actor, movie_evaluat_num, acc_evaluat_score, acc_audience_num, good_num,
				to_char(movie_open_date, 'YYYY.MM.DD') as movie_open_date from movie where movie_code = #{movie_code}
	</select>
	
	<select id = "searchByName" parameterType="java.lang.String" resultType="movieDTO">
		select * from movie where movie_name like '%'|| #{movie_name} || '%'
	</select>
	
	<select id="FinderTotalA" parameterType="java.util.Map" resultType="int">
		select count(*) from movie
		<where>
			<if test="movie_type != null">
			 	(movie_type1 IN 
				<foreach item="item" index="index" collection="movie_type"
     				 open="(" separator="," close=")">
       				#{item}
  				</foreach>
  				or movie_type2 IN 
				<foreach item="item" index="index" collection="movie_type"
     				 open="(" separator="," close=")">
       				#{item}
  				</foreach>
  				or movie_type3 IN 
				<foreach item="item" index="index" collection="movie_type"
     				 open="(" separator="," close=")">
       				#{item}
  				</foreach>)
			</if>
			<if test="make_nation != null">
				and make_nation IN 
				<foreach item="item" index="index" collection="make_nation"
     				 open="(" separator="," close=")">
       				#{item}
  				</foreach>
			</if>
			<if test="movie_show_grade != null">
				and movie_show_grade_name IN 
				<foreach item="item" index="index" collection="movie_show_grade"
     				 open="(" separator="," close=")">
       				#{item}
  				</foreach>
			</if>
			<if test="movie_search != null and movie_search == 'all'">
				and (movie_name like '%'|| #{movie_keyword} || '%' or appear_actor like '%'|| #{movie_keyword} || '%' or movie_director like '%'|| #{movie_keyword} || '%' )
			</if>
			<if test="movie_search != null and movie_search == 'movie_name'">
				and (movie_name like '%'|| #{movie_keyword} || '%' )
			</if>
			<if test="movie_search != null and movie_search == 'movie_actor'">
				and (appear_actor like '%'|| #{movie_keyword} || '%' )
			</if>
			<if test="movie_search != null and movie_search == 'movie_director'">
				and (movie_director like '%'|| #{movie_keyword} || '%' )
			</if>
		</where>
	</select>
	
	<select id = "movieFinder" parameterType="java.util.Map" resultType="movieDTO">
		<![CDATA[select movie_code, movie_name, GOOD_NUM, ACC_AUDIENCE_NUM, 
 		to_char(movie_open_date, 'YYYY.MM.DD') as movie_open_date  
 		from (select rownum rn, tt.*  
 				from (select * from movie ]]> 
					<where>
						<if test="movie_type != null">
						 	(movie_type1 IN 
							<foreach item="item" index="index" collection="movie_type"
			     				 open="(" separator="," close=")">
			       				#{item}
			  				</foreach>
			  				or movie_type2 IN 
							<foreach item="item" index="index" collection="movie_type"
			     				 open="(" separator="," close=")">
			       				#{item}
			  				</foreach>
			  				or movie_type3 IN 
							<foreach item="item" index="index" collection="movie_type"
			     				 open="(" separator="," close=")">
			       				#{item}
			  				</foreach>)
						</if>
						<if test="make_nation != null">
							and make_nation IN 
							<foreach item="item" index="index" collection="make_nation"
			     				 open="(" separator="," close=")">
			       				#{item}
			  				</foreach>
						</if>
						<if test="movie_show_grade != null">
							and movie_show_grade_name IN 
							<foreach item="item" index="index" collection="movie_show_grade"
			     				 open="(" separator="," close=")">
			       				#{item}
			  				</foreach>
						</if>
						<if test="movie_search != null and movie_search == 'all'">
							and (movie_name like '%'|| #{movie_keyword} || '%' or appear_actor like '%'|| #{movie_keyword} || '%' or movie_director like '%'|| #{movie_keyword} || '%' )
						</if>
						<if test="movie_search != null and movie_search == 'movie_name'">
							and (movie_name like '%'|| #{movie_keyword} || '%' )
						</if>
						<if test="movie_search != null and movie_search == 'movie_actor'">
							and (appear_actor like '%'|| #{movie_keyword} || '%' )
						</if>
						<if test="movie_search != null and movie_search == 'movie_director'">
							and (movie_director like '%'|| #{movie_keyword} || '%' )
						</if>
					</where> order by movie_code desc) tt) 
		<![CDATA[where rn>=#{startNum} and rn<=#{endNum}]]>
	</select>
	
	<select id="presentMovieList" parameterType="java.util.Map" resultType="movieDTO">
		<![CDATA[select movie_code, movie_name, GOOD_NUM, ACC_AUDIENCE_NUM, 
 		to_char(movie_open_date, 'YYYY.MM.DD') as movie_open_date  
 		from (select rownum rn, tt.*  
 				from (select * from movie ]]> 
					<where>
						<if test="code_list != null">
						 	movie_code IN 
							<foreach item="item" index="index" collection="code_list"
			     				 open="(" separator="," close=")">
			       				#{item} 
			  				</foreach>
			  			</if>
					</where> order by movie_code desc) tt) 
		<![CDATA[where rn>=#{m_startNum} and rn<=#{m_endNum}]]>
	</select>
	
	<select id="allReserveCount" resultType="Integer">
		select sum(reserve_num) from (
			select movie_code, sum(reserve_num) as reserve_num 
					from (select rr.show_present_code, ss.movie_code, ( NVL2(rr.nonmember_seat1, 1, 0) + NVL2(rr.nonmember_seat2, 1, 0) + NVL2(rr.nonmember_seat3, 1, 0) + NVL2(rr.nonmember_seat4, 1, 0) + NVL2(rr.nonmember_seat5, 1, 0) + NVL2(rr.nonmember_seat6, 1, 0) + NVL2(rr.nonmember_seat7, 1, 0) + NVL2(rr.nonmember_seat8, 1, 0) ) as reserve_num 
							from nonmember_reserve rr, show_present ss
							where rr.show_present_code = ss.show_present_code
							AND ss.show_date >= sysdate-7
							UNION ALL
							select rr.show_present_code, ss.movie_code, ( NVL2(rr.member_seat1, 1, 0) + NVL2(rr.member_seat2, 1, 0) + NVL2(rr.member_seat3, 1, 0) + NVL2(rr.member_seat4, 1, 0) + NVL2(rr.member_seat5, 1, 0) + NVL2(rr.member_seat6, 1, 0) + NVL2(rr.member_seat7, 1, 0) + NVL2(rr.member_seat8, 1, 0) ) as reserve_num 
							from member_reserve rr, show_present ss
							where rr.show_present_code = ss.show_present_code
							AND ss.show_date >= sysdate-7
							) reserve
					group by movie_code
		)
	</select>
	
	<select id="movieReserveRank" parameterType="java.util.Map" resultType="reserveRank">
		<![CDATA[select movie_code, reserve_num
 		from (select rownum rn, tt.*  
 				from ( select movie_code, reserve_num from (
				select movie_code, sum(reserve_num) as reserve_num 
					from (select rr.show_present_code, ss.movie_code, ( NVL2(rr.nonmember_seat1, 1, 0) + NVL2(rr.nonmember_seat2, 1, 0) + NVL2(rr.nonmember_seat3, 1, 0) + NVL2(rr.nonmember_seat4, 1, 0) + NVL2(rr.nonmember_seat5, 1, 0) + NVL2(rr.nonmember_seat6, 1, 0) + NVL2(rr.nonmember_seat7, 1, 0) + NVL2(rr.nonmember_seat8, 1, 0) ) as reserve_num 
							from nonmember_reserve rr, show_present ss
							where rr.show_present_code = ss.show_present_code
							AND ss.show_date >= sysdate-7
							UNION ALL
							select rr.show_present_code, ss.movie_code, ( NVL2(rr.member_seat1, 1, 0) + NVL2(rr.member_seat2, 1, 0) + NVL2(rr.member_seat3, 1, 0) + NVL2(rr.member_seat4, 1, 0) + NVL2(rr.member_seat5, 1, 0) + NVL2(rr.member_seat6, 1, 0) + NVL2(rr.member_seat7, 1, 0) + NVL2(rr.member_seat8, 1, 0) ) as reserve_num 
							from member_reserve rr, show_present ss
							where rr.show_present_code = ss.show_present_code
							AND ss.show_date >= sysdate-7
							) reserve
					group by movie_code
		) order by reserve_num desc) tt) where rn>=#{startNum} and rn<=#{endNum}]]>
	</select>
	
	<select id="movieReserveNum" parameterType="int" resultType="Integer">
			select sum(reserve_num) as reserve_num 
					from (select rr.show_present_code, ss.movie_code, ( NVL2(rr.nonmember_seat1, 1, 0) + NVL2(rr.nonmember_seat2, 1, 0) + NVL2(rr.nonmember_seat3, 1, 0) + NVL2(rr.nonmember_seat4, 1, 0) + NVL2(rr.nonmember_seat5, 1, 0) + NVL2(rr.nonmember_seat6, 1, 0) + NVL2(rr.nonmember_seat7, 1, 0) + NVL2(rr.nonmember_seat8, 1, 0) ) as reserve_num 
							from nonmember_reserve rr, show_present ss
							where rr.show_present_code = ss.show_present_code
							AND ss.show_date >= sysdate-7
							UNION ALL
							select rr.show_present_code, ss.movie_code, ( NVL2(rr.member_seat1, 1, 0) + NVL2(rr.member_seat2, 1, 0) + NVL2(rr.member_seat3, 1, 0) + NVL2(rr.member_seat4, 1, 0) + NVL2(rr.member_seat5, 1, 0) + NVL2(rr.member_seat6, 1, 0) + NVL2(rr.member_seat7, 1, 0) + NVL2(rr.member_seat8, 1, 0) ) as reserve_num 
							from member_reserve rr, show_present ss
							where rr.show_present_code = ss.show_present_code
							AND ss.show_date >= sysdate-7
							) reserve where movie_code=#{movie_code}
			group by movie_code
	</select>
	
	<select id="movieAudienceRank" parameterType="java.util.Map" resultType="movieDTO">
		<![CDATA[select movie_code, movie_name, GOOD_NUM, ACC_AUDIENCE_NUM, acc_evaluat_score, movie_evaluat_num, 
 			to_char(movie_open_date, 'YYYY.MM.DD') as movie_open_date  
 				from (select rownum rn, tt.*  
 					from (select * from movie 
 					order by acc_audience_num desc) tt) where rn>=#{startNum} and rn<=#{endNum}]]>
	</select>

	<select id="movieScoreRank" parameterType="java.util.Map" resultType="movieDTO">
		<![CDATA[select movie_code, movie_name, GOOD_NUM, ACC_AUDIENCE_NUM, acc_evaluat_score, movie_evaluat_num, 
 			to_char(movie_open_date, 'YYYY.MM.DD') as movie_open_date  
 				from (select rownum rn, tt.*  
 					from (select * from movie 
 					order by (NVL(ACC_EVALUAT_SCORE / DECODE(MOVIE_EVALUAT_NUM, 0, null, MOVIE_EVALUAT_NUM), 0)) desc) tt) where rn>=#{startNum} and rn<=#{endNum}]]>
	</select>
	
	<select id="movieNonOpenRank" parameterType="java.util.Map" resultType="movieDTO">
		<![CDATA[select movie_code, movie_name, GOOD_NUM, ACC_AUDIENCE_NUM, acc_evaluat_score, movie_evaluat_num, 
 			to_char(movie_open_date, 'YYYY.MM.DD') as movie_open_date  
 				from (select rownum rn, tt.*  
 					from (select * from movie 
 					where movie_open_date > sysdate order by good_num desc) tt) where rn>=#{startNum} and rn<=#{endNum}]]>
	</select>
	
	<select id="movieNonOpenTotal" resultType="int">
		select count(*) from movie 
 					where movie_open_date > sysdate order by good_num desc
	</select>
	
</mapper>
