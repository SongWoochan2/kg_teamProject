<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mybatis.reserveMapper">

	<!-- 극장이나 날짜를 눌렀을때 영화가 변경  -->
	<select id="movieList" parameterType="java.util.Map" resultType="movieDTO">
		SELECT * FROM movie 
		where movie_code IN ( 
			select movie_code from show_present
 			<where> 
				<![CDATA[to_char(show_date, 'YYYYMMDD') >= to_char(sysdate, 'YYYYMMDD')]]>	
  				<if test="show_date != null">
					AND to_char(show_date, 'YYYYMMDD') = #{show_date}
	   			</if>
	   			<if test="theater_code != null">
					AND show_place_code IN ( 
						select show_place_code from show_place
						where theater_code = #{theater_code}
					)
	   			</if>
 			</where>
		)
		ORDER BY movie_name asc, movie_code desc
	</select>
	
	<!-- <![CDATA[  ]]> -->
	
	<!-- 영화나 날짜를 눌렀을때 극장이 변경  -->
	<select id="theaterList" parameterType="java.util.Map" resultType="theaterDTO">
		select * from theater
		where theater_code IN ( 
			select theater_code from show_place 
			where show_place_code IN ( 
				select show_place_code from show_present
				<where> 
					<![CDATA[to_char(show_date, 'YYYYMMDD') >= to_char(sysdate, 'YYYYMMDD')]]>	
	   				<if test="show_date != null">
						AND to_char(show_date, 'YYYYMMDD') = #{show_date}
	    			</if>
	    			<if test="movie_code != null">
						AND movie_code = #{movie_code}
	    			</if>
	  			</where>
			)
		)
		ORDER BY theater_code desc
	</select>
	
	
	<!-- 영화나 극장를 눌렀을때 날짜및 상영현황이 변경  -->
	<select id="dateList" parameterType="java.util.Map" resultType="showPresentAllVO">
		select * from show_present, show_place, movie
		<where>
			show_present.show_place_code = show_place.show_place_code
			AND show_present.movie_code = movie.movie_code
			<![CDATA[AND to_char(show_present.show_date, 'YYYYMMDD') >= to_char(sysdate, 'YYYYMMDD')]]>	
  			<if test="theater_code != null">
				AND show_place.theater_code = #{theater_code}
   			</if>
   			<if test="movie_code != null">
				AND movie.movie_code = #{movie_code}
   			</if>
 		</where>
 		ORDER BY show_present.show_date asc, show_place.theater_code asc, show_present.show_place_code asc,  show_present.show_time asc
	</select>
	
	
	
	<!-- 영화나 극장를 눌렀을때 날짜및 상영현황이 변경  -->
	<select id="showList" parameterType="java.util.Map" resultType="showPresentAllVO">
		select * from show_present, show_place, movie
		<where>
			show_present.show_place_code = show_place.show_place_code
			AND show_present.movie_code = movie.movie_code
			AND to_char(show_date, 'YYYYMMDD') = #{show_date}
			AND show_place.theater_code = #{theater_code}
			AND movie.movie_code = #{movie_code}
 		</where>
 		ORDER BY show_present.show_date asc, show_place.theater_code asc, show_present.show_place_code asc,  show_present.show_time asc
	</select>
	
	<!-- 영화별 좌석 예매수 -->
	<select id="reserveRate">
	select movie_code, count(*) as reserve_num 
	from 	(select rr.show_present_code, ss.movie_code, ( NVL2(rr.nonmember_seat1, 1, 0) + NVL2(rr.nonmember_seat2, 1, 0) + NVL2(rr.nonmember_seat3, 1, 0) + NVL2(rr.nonmember_seat4, 1, 0) + NVL2(rr.nonmember_seat5, 1, 0) + NVL2(rr.nonmember_seat6, 1, 0) + NVL2(rr.nonmember_seat7, 1, 0) + NVL2(rr.nonmember_seat8, 1, 0) ) as reserve_num 
			from nonmember_reserve rr, show_present ss
			where rr.show_present_code = ss.show_present_code
			AND ss.show_date >= sysdate-7

			UNION ALL
			
			select rr.show_present_code, ss.movie_code, ( NVL2(rr.member_seat1, 1, 0) + NVL2(rr.member_seat2, 1, 0) + NVL2(rr.member_seat3, 1, 0) + NVL2(rr.member_seat4, 1, 0) + NVL2(rr.member_seat5, 1, 0) + NVL2(rr.member_seat6, 1, 0) + NVL2(rr.member_seat7, 1, 0) + NVL2(rr.member_seat8, 1, 0) ) as reserve_num 
			from member_reserve rr, show_present ss
			where rr.show_present_code = ss.show_present_code
			AND ss.show_date >= sysdate-7

			) as reserve
	group by movie_code
	</select>
	
	
	
	<!-- 
		필요한 것 : 영화이름
		조건 : 
		1. 영화의 영화코드는 상영현황의 영화코드 일치
		2. 오늘을 포함한 이후의 날짜가 상영날짜인가
		3. 극장의 극장코드와 요구하는 극장의 극장코드와 일치
	 -->
	
	<!-- 영화나 날짜를 눌렀을때 극장이 변경 -->
	<!--
	<select id="reserveList" parameterType="java.util.Map" resultType="reserveDTO">
		select theater_name FROM theater 
			where theater_code in(select theater_code from show_place
			where show_place_code in(select show_place_code from show_present
			where movie_code in(select movie_code from movie where movie_code = #{movie_code})
			and to_char(show_date, 'YYYYMMDD') >= to_char(sysdate, 'YYYYMMDD')
			<if test="show_date != null">
				AND to_char(show_date, 'YYYYMMDD') = '20180426'
	    	</if>
		))
	</select>
	 -->
	<!-- 
	극장 이름을 가져오는 조건
	1. 극장의 코드와 상영관의 극장코드가 일치
	2. 상영관과 상영현황의 상영관코드가 일치
	3. 상영현황의 영화코드와 영화의 영화코드가 일치
	4. 오늘을 포함한 이후의 날짜가 상영날짜인가
	5. 특정 영화를 선택
	ex)
	select theater_name FROM theater 
	where theater_code in(select theater_code from show_place
	where show_place_code in(select show_place_code from show_present
	where movie_code in(select movie_code from movie where movie_code = 1)
	and to_char(show_date, 'YYYYMMDD') >= to_char(sysdate, 'YYYYMMDD')	
	AND to_char(show_date, 'YYYYMMDD') = '20180426'));
	
	조인 사용방법
	ex) 6상영관이 있는 극장의 이름이 궁금할때
	select t.theater_name FROM theater t, show_place s
	where s.theater_code = t.theater_code and s.show_place_name='6상영관';
	-->
	
	<select id="getTotalA" resultType="int">
		select count(*) from show_present
	</select>
	
	<select id="reserveView" parameterType="int" resultType="reserveDTO">
		select * from show_present where show_present_code=#{show_present_code}
	</select>
	
	<!-- <select id="getSomething" parameterType="int" resultType="#package.#modelname">
		SELECT
		columnname1,
		columnname2,
		columnname3
		FROM tablename1
		WHERE columnname1 = #{value}
	</select>

	<resultMap type="#modelname" id="YourResultSet">
		<id property="param1" column="columnname1" />
		<result property="param2" column="columnname2" />
		<result property="param3" column="columnname3" />
	</resultMap>

	<select id="getAll" resultMap="YourResultSet">
		SELECT * FROM tablename1
	</select>

	<insert id="insertSomething" parameterType="#modelname">
		INSERT INTO tablename1 (columnname1, columnname2, columnname3)
		VALUES(#{value1},#{value2},#{value3})
	</insert>

	<update id="updateSomething" parameterType="#modelname">
		UPDATE tablename1
		SET
		columnname1=#{param1}
		WHERE
		columnname2 = #{param2}
	</update>

	<delete id="deleteSomething" parameterType="int">
		DELETE FROM tablename1 WHERE
		columnname1 = #{param1}
	</delete> -->
</mapper>